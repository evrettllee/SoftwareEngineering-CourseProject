#include "pch.h"


Error::ERROR errors[ERROR_MAX_ENTRY] =
{
	// 0 - 99
	ERROR_ENTRY(0, "Недопустимый код ошибки"),
	ERROR_ENTRY(1, "Системная ошибка: Системный сбой"),
	ERROR_ENTRY_NODEF(2),
	ERROR_ENTRY_NODEF(3),
	ERROR_ENTRY_NODEF(4),
	ERROR_ENTRY_NODEF(5),
	ERROR_ENTRY_NODEF(6),
	ERROR_ENTRY_NODEF(7),
	ERROR_ENTRY_NODEF(8),
	ERROR_ENTRY_NODEF(9),
	ERROR_ENTRY_NODEF10(10),
	ERROR_ENTRY_NODEF10(20),
	ERROR_ENTRY_NODEF10(30),
	ERROR_ENTRY_NODEF10(40),
	ERROR_ENTRY_NODEF10(50),
	ERROR_ENTRY_NODEF10(60),
	ERROR_ENTRY_NODEF10(70),
	ERROR_ENTRY_NODEF10(80),
	ERROR_ENTRY_NODEF10(90),
	// 100 - 109
	ERROR_ENTRY(100,"Ошибка входных параметров: Параметр -in должен быть задан"),
	ERROR_ENTRY(101, "Ошибка входных параметров: Превышена длина входного параметра"),
	ERROR_ENTRY_NODEF(102),
	ERROR_ENTRY_NODEF(103),
	ERROR_ENTRY_NODEF(104),
	ERROR_ENTRY_NODEF(105),
	ERROR_ENTRY_NODEF(106),
	ERROR_ENTRY_NODEF(107),
	ERROR_ENTRY_NODEF(108),
	ERROR_ENTRY_NODEF(109),
	// 110 - 119
	ERROR_ENTRY(110,"Ошибка файла: Ошибка при открытии файла с исходным кодом (-in)"),
	ERROR_ENTRY(111,"Ошибка файла: Недопустимый символ в исходном файле (-in)"),
	ERROR_ENTRY(112,"Ошибка файла: Ошибка при создании файла протокола (-log)"),
	ERROR_ENTRY(113, "Ошибка файла: Превышена длина файла с исходным кодом (-in)"),
	ERROR_ENTRY(114, "Ошибка файла: Ошибка при открытии файла для записи таблицы лексем"),
	ERROR_ENTRY(115, "Ошибка файла: Ошибка при открытии файла для записи таблицы идентификаторов"),
	ERROR_ENTRY(116, "Ошибка файла: Ошибка при создании выходного файла (-out)"),
	ERROR_ENTRY_NODEF(117),
	ERROR_ENTRY_NODEF(118),
	ERROR_ENTRY_NODEF(119),
	// 120 - 199
	ERROR_ENTRY(120, "Лексический анализатор: недопустимый размер таблицы при её создании"),
	ERROR_ENTRY(121, "Лексический анализатор: превышен допустимый размер таблицы при добавлении элемента"),
	ERROR_ENTRY(122, "Лексический анализатор: недопустимый индекс при получении элемента таблицы"),
	ERROR_ENTRY(123, "Лексический анализатор: недопустимый размер таблицы при её создании"),
	ERROR_ENTRY(124, "Лексический анализатор: превышен допустимый размер таблицы при добавлении элемента"),
	ERROR_ENTRY(125, "Лексический анализатор: недопустимый индекс при получении элемента таблицы"),
	ERROR_ENTRY(126, "Лексический анализатор: превышен допустимый размер лексемы"),
	ERROR_ENTRY(127, "Лексический анализатор: нераспознанная лексема"),
	ERROR_ENTRY(128, "Лексический анализатор: ошибка при считывании строкового литерала"),
	ERROR_ENTRY_NODEF(129),
	ERROR_ENTRY_NODEF10(130),
	ERROR_ENTRY_NODEF10(140),
	ERROR_ENTRY_NODEF10(150),
	ERROR_ENTRY_NODEF10(160),
	ERROR_ENTRY_NODEF10(170),
	ERROR_ENTRY_NODEF10(180),
	ERROR_ENTRY_NODEF10(190),
	// 200 - 299
	ERROR_ENTRY(200, "Синтаксическая анализ: неверная структура программы"),
	ERROR_ENTRY(201, "Синтаксический анализ: некорректное использование операторов языка"),
	ERROR_ENTRY(202, "Синтаксическая анализ: ошибка в выражении"),
	ERROR_ENTRY(203, "Синтаксическая анализ: ошибка в подвыражении"),
	ERROR_ENTRY(204, "Синтаксическая анализ: ошибка в объявлении параметров функции"),
	ERROR_ENTRY(205, "Синтаксическая анализ: ошибка в передаваемых параметрах функции"),
	ERROR_ENTRY(206, "Синтаксическая анализ: ошибка в объявлении массива"),
	ERROR_ENTRY(207, "Синтаксическая анализ: синтаксический анализ завершён досрочно"),
	ERROR_ENTRY(208, "Синтаксический анализ: некорректное использование массива"),
	ERROR_ENTRY(209, "Синтаксический анализ: некорректное закрытие индекса массива"),
	ERROR_ENTRY_NODEF(210),
	ERROR_ENTRY_NODEF(211),
	ERROR_ENTRY_NODEF(212),
	ERROR_ENTRY_NODEF(213),
	ERROR_ENTRY_NODEF(214),
	ERROR_ENTRY_NODEF(215),
	ERROR_ENTRY_NODEF(216),
	ERROR_ENTRY_NODEF(217),
	ERROR_ENTRY_NODEF(218),
	ERROR_ENTRY_NODEF(219),
	ERROR_ENTRY_NODEF10(220),
	ERROR_ENTRY_NODEF10(230),
	ERROR_ENTRY_NODEF10(240),
	ERROR_ENTRY_NODEF10(250),
	ERROR_ENTRY_NODEF10(260),
	ERROR_ENTRY_NODEF10(270),
	ERROR_ENTRY_NODEF10(280),
	ERROR_ENTRY_NODEF10(290),
	// 300 - 399
	ERROR_ENTRY(300, "Семантический анализатор: дублирование функции main"),
	ERROR_ENTRY(301, "Семантический анализатор: повторное объявление функции"),
	ERROR_ENTRY(302, "Семантический анализатор: дублирование параметра функции"),
	ERROR_ENTRY(303, "Семантический анализатор: повторное объявление переменной"),
	ERROR_ENTRY(304, "Семантический анализатор: повторное объявление массива"),
	ERROR_ENTRY(305, "Семантический анализатор: недопустимое значение размера массива"),
	ERROR_ENTRY(306, "Семантический анализатор: размер массива должен быть статическим значением"),
	ERROR_ENTRY(307, "Семантический анализатор: идентификатор не найден в доступной области видимости"),
	ERROR_ENTRY(308, "Семантический анализатор: отсутствует точка входа в программу"),
	ERROR_ENTRY(309, "Семантический анализатор: присваивание невозможно"),
	ERROR_ENTRY(310, "Семантический анализатор: функции DATE и TIME возвращают строковый тип"),
	ERROR_ENTRY(311, "Семантический анализатор: невозможно присвоить результат логического выражения"),
	ERROR_ENTRY(312, "Семантический анализатор: несоответствие типов данных в выражении"),
	ERROR_ENTRY(313, "Семантический анализатор: недопустимые типы данных для арифметических операций"),
	ERROR_ENTRY(314, "Семантический анализатор: функции DATE и TIME не должны содержать аргументов"),
	ERROR_ENTRY(315, "Семантический анализатор: функция не должна содержать параметры"),
	ERROR_ENTRY(316, "Семантический анализатор: превышено количество аргументов при вызове функции"),
	ERROR_ENTRY(317, "Семантический анализатор: несовпадение типов аргументов функции"),
	ERROR_ENTRY(318, "Семантический анализатор: недостаточное количество аргументов при вызове функции"),
	ERROR_ENTRY(319, "Семантический анализатор: неверный тип данных в выражении if/while"),
	ERROR_ENTRY(320, "Семантический анализатор: недопустимое сравнение в выражении if/while"),
	ERROR_ENTRY(321, "Семантический анализатор: отсутствует оператор return в функции"),
	ERROR_ENTRY(322, "Семантический анализатор: тип возвращаемого значения не соответствует типу функции"),
	ERROR_ENTRY(323, "Семантический анализатор: неверное выражение в операторе return"),
	ERROR_ENTRY(324, "Семантический анализатор: индекс выходит за границы массива"),
	ERROR_ENTRY(325, "Семантический анализатор: недопустимое значение для индекса массива"),
	ERROR_ENTRY(326, "Семантический анализатор: тип элемента не соответствует типу массива при присваивании"),
	ERROR_ENTRY(327, "Семантический анализатор: обнаружен не литерал в инициализаторе массива"),
	ERROR_ENTRY(328, "Семантический анализатор: количество элементов в инициализаторе не совпадает с размером массива"),
	ERROR_ENTRY(329, "Семантический анализатор: несовпадение типов при присваивании"),
	ERROR_ENTRY(330, "Семантический анализатор: несовпадение типов в логическом выражении"),
	ERROR_ENTRY(331, "Семантический анализатор: бесконечный цикл в выражении while"),
	ERROR_ENTRY(332, "Семантический анализатор: пусток блок в if/else/while"),
	ERROR_ENTRY_NODEF(333),
	ERROR_ENTRY_NODEF(334),
	ERROR_ENTRY(335, "Семантический анализатор: недопустимый тип целочисленного литерала"),
	ERROR_ENTRY(336, "Семантический анализатор: целочисленный литерал превысил максимальное значение для хранения"),
	ERROR_ENTRY_NODEF(337),
	ERROR_ENTRY_NODEF(338),
	ERROR_ENTRY_NODEF(339),
	ERROR_ENTRY_NODEF10(340),
	ERROR_ENTRY_NODEF10(350),
	ERROR_ENTRY_NODEF10(360),
	ERROR_ENTRY_NODEF10(370),
	ERROR_ENTRY_NODEF10(380),
	ERROR_ENTRY_NODEF10(390),
	// 400 - 999
	ERROR_ENTRY_NODEF100(400),
	ERROR_ENTRY_NODEF100(500),
	ERROR_ENTRY_NODEF100(600),
	ERROR_ENTRY_NODEF100(700),
	ERROR_ENTRY_NODEF100(800),
	ERROR_ENTRY_NODEF100(900)
};

namespace Error
{
	ERROR Error::GetError(int id)
	{
		if (id > 0 && id < ERROR_MAX_ENTRY)
		{
			return errors[id];
		}
		else
		{
			return errors[0];
		}
	}

	ERROR Error::GetErrorIn(int id, int line = -1, int col = -1)
	{
		if (id > 0 && id < ERROR_MAX_ENTRY)
		{
			errors[id].intext.col = col;
			errors[id].intext.line = line;
			return errors[id];
		}
		else
		{
			return errors[0];
		}
	}
}